From 13a5304384c4c4c8dc044081ef624f0a027b9634 Mon Sep 17 00:00:00 2001
From: Yann Sionneau <ysionneau@kalray.eu>
Date: Wed, 12 Jul 2023 19:51:29 +0200
Subject: [PATCH] string format fixes

---
 gcc/config/kvx/kvx.cc | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/gcc/config/kvx/kvx.cc b/gcc/config/kvx/kvx.cc
index 3a1dba70c..0af65030d 100644
--- a/gcc/config/kvx/kvx.cc
+++ b/gcc/config/kvx/kvx.cc
@@ -6736,7 +6736,7 @@ kvx_addr_space_legitimize_address (rtx x, rtx oldx, machine_mode mode,
 				   addr_space_t as)
 {
   if (as == KVX_ADDR_SPACE_CONVERT)
-    error ("__convert should be used only in explicit pointer casting");
+    error ("%<__convert%> should be used only in explicit pointer casting");
 
   return kvx_legitimize_address (x, oldx, mode);
 }
@@ -6764,7 +6764,7 @@ kvx_addr_space_convert (rtx op, tree from_type, tree to_type ATTRIBUTE_UNUSED)
 		 ? "Implicit conversion from uncached pointer to cached one"
 		 : "Implicit conversion from cached pointer to uncached one");
       inform (input_location,
-	      "Use (__convert <type> *) to acknowledge this conversion");
+	      "Use %<(__convert <type> *)%> to acknowledge this conversion");
     }
   return op;
 }
@@ -8009,7 +8009,7 @@ kvx_handle_fixed_reg_option (const char *arg)
 
   if (first_reg < 0)
     {
-      error ("Unknown register %s passed to -ffixed-reg.", arg);
+      error ("Unknown register %<%s%> passed to %<-ffixed-reg%>", arg);
       return false;
     }
 
@@ -8023,7 +8023,7 @@ kvx_handle_fixed_reg_option (const char *arg)
 	  }
       if (last_reg < 0)
 	{
-	  error ("Unknown register %s passed to -ffixed-reg.", dash + 1);
+	  error ("Unknown register %<%s%> passed to %<-ffixed-reg%>.", dash + 1);
 	  return false;
 	}
     }
@@ -8034,7 +8034,7 @@ kvx_handle_fixed_reg_option (const char *arg)
 
   if (first_reg > last_reg)
     {
-      error ("Invalid range passed to -ffixed-reg.");
+      error ("Invalid range passed to %<-ffixed-reg%>.");
       return false;
     }
 
@@ -8054,7 +8054,7 @@ kvx_handle_stack_limit_symbol_option (const char *arg)
       /* Only allow $sr as stack-limit register */
       if (strncmp (arg, "__cos_stack_limit", 17))
 	{
-	  error ("only `__cos_stack_limit' can be used as stack-limit symbol");
+	  error ("only %<__cos_stack_limit%> can be used as stack-limit symbol");
 	}
       else
 	{
@@ -8067,7 +8067,7 @@ kvx_handle_stack_limit_symbol_option (const char *arg)
     }
   else
     {
-      error ("-fstack-limit-* is not supported.");
+      error ("%<-fstack-limit-*%> is not supported");
     }
 
   return false;
@@ -8097,7 +8097,7 @@ kvx_handle_stack_limit_register_option (const char *arg)
     }
   else
     {
-      error ("-fstack-limit-* is not supported.");
+      error ("%<-fstack-limit-*%> is not supported");
     }
 
   return false;
-- 
2.34.1

